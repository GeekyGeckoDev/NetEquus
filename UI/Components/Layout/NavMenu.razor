@* @rendermode InteractiveServer

 @using Application.EstateApp.IEstateAuthService;
 @using Application.UserApp.AuthServices
 @using System.Security.Claims
 @using UI.Services.Authentication
 @inject CustomAuthStateProvider AuthStateProvider
 @inject IAuthService AuthService
 @inject IUserContext UserContext *@

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">UI</a>
	</div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
	<nav class="flex-column">
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				<span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
			</NavLink>
		</div>

		<div class="nav-item px-3">
			<NavLink class="nav-link" href="counter">
				<span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
			</NavLink>
		</div>

		<div class="nav-item px-3">
			<NavLink class="nav-link" href="weather">
				<span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
			</NavLink>
		</div>
	</nav>
	<div class="nav-item px-3">
		<NavLink class="nav-link" href="login">
			<span class="bi bi-person-nav-menu" aria-hidden="true"></span> Login
		</NavLink>
	</div>
	<div class="nav-item px-3">
		<NavLink class="nav-link" href="mustBeLoggedIn">
			<span class="bi bi-key-nav-menu" aria-hidden="true"></span> Must Be Logged In
		</NavLink>
	</div>
	<div class="nav-item px-3">
		<NavLink class="nav-link" href="mustBeAdmin">
			<span class="bi bi-person-nav-menu" aria-hidden="true"></span> MustBeAdmin
		</NavLink>
	</div>
	<div class="nav-item px-3">
		<NavLink class="nav-link" href="logout">
			<span class="bi bi-door-nav-menu" aria-hidden="true"></span> Logout
		</NavLink>
	</div>
	<div class="nav-item px-3">
		<NavLink class="nav-link" href="registration">
			<span class="bi bi-door-nav-menu" aria-hidden="true"></span> Registration
		</NavLink>
	</div>
	<div class="nav-item px-3">
		<NavLink class="nav-link" href="createestate">
			<span class="bi bi-door-nav-menu" aria-hidden="true"></span> Create Estate
		</NavLink>
	</div>
	<div class="nav-item px-3">
		<NavLink class="nav-link" href="estatemanager">
			<span class="bi bi-door-nav-menu" aria-hidden="true"></span> See Estate
		</NavLink>


	</div>
</div>


@* @code {

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		user = authState.User;
	}

	[Inject] private IJSRuntime JS { get; set; }

	private ClaimsPrincipal user = new ClaimsPrincipal();
	private bool _restored = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !_restored)
		{
			_restored = true;

			// Restore user from JWT in AuthService (reads localStorage safely)
			bool restored = await AuthService.GetStateFromTokenAsync();

			if (restored)
			{
				user = AuthService.CurrentUser;
				Console.WriteLine($"[Navbar] Restored user: {user.Identity?.Name ?? "Anonymous"}");
				StateHasChanged();
			}

			// Subscribe to user changes after restoration
			AuthService.UserChanged += OnUserChanged;
		}
	}

	private void OnUserChanged(ClaimsPrincipal updatedUser)
	{
		user = updatedUser;
		InvokeAsync(StateHasChanged);

		Console.WriteLine($"[Navbar] User updated: {user.Identity?.Name ?? "Anonymous"}");
	}
 } *@